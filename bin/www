#!/usr/bin/env node
Configs = require('../configs');

function initApp(){
  var app = require('../app');
  var debug = require('debug')('upb:server');
  var http = require('http');
  /**
   * Get port from environment and store in Express.
   */
  var port = normalizePort(process.env.PORT || Configs.get('SERVER_PORT'));

  app.set('port', port);

  /**
   * Create HTTP server.
   */
  app.server = http.createServer(app);
  app.server.listen(port, function() {
    console.log((new Date()) + " Server is listening on port " + port);
  });
  app.server.on('error', onError);
  app.server.on('listening', onListening);


  /**
   * Event listener for HTTP server "error" event.
   */

  function onError(error) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  /**
   * Event listener for HTTP server "listening" event.
   */

  function onListening() {
    var addr = app.server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
  }
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

