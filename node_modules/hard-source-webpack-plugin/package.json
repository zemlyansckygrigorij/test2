{
  "_from": "hard-source-webpack-plugin",
  "_id": "hard-source-webpack-plugin@0.6.4",
  "_inBundle": false,
  "_integrity": "sha512-+JrX43xkJ2aLnrQcDXhYEuCXgC+WfMNwJ1CcNqOLzR+miz/gNUUA86Q3fUOph6dFQ42AgArNU623xyLJGzZ3ag==",
  "_location": "/hard-source-webpack-plugin",
  "_phantomChildren": {
    "glob": "7.1.2"
  },
  "_requested": {
    "escapedName": "hard-source-webpack-plugin",
    "fetchSpec": "latest",
    "name": "hard-source-webpack-plugin",
    "raw": "hard-source-webpack-plugin",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#DEV:/",
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/hard-source-webpack-plugin/-/hard-source-webpack-plugin-0.6.4.tgz",
  "_shasum": "d80575d42c53e6af6dadc92271577a61cda20b12",
  "_spec": "hard-source-webpack-plugin",
  "_where": "/usr/local/flexites/projects_ext/upb/upb_nodejs",
  "author": {
    "email": "mzgoddard@gmail.com",
    "name": "Michael \"Z\" Goddard"
  },
  "bugs": {
    "url": "https://github.com/mzgoddard/hard-source-webpack-plugin/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash": "^4.15.0",
    "mkdirp": "^0.5.1",
    "node-object-hash": "^1.2.0",
    "rimraf": "^2.6.2",
    "tapable": "^1.0.0-beta.5",
    "webpack-core": "~0.6.0",
    "webpack-sources": "^1.0.1",
    "write-json-file": "^2.3.0"
  },
  "deprecated": false,
  "description": "Hard cache the source of modules in webpack.",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-preset-env": "^1.6.1",
    "chai": "^3.5.0",
    "css-loader": "^0.27.0",
    "extract-text-webpack-plugin": "^3.0.0 || ^2.0.0 || ^1.0.1",
    "file-loader": "^1.0.0 || ^0.11.0 || ^0.10.1",
    "html-webpack-plugin": "^2.22.0",
    "level": "^2.1.1",
    "memory-fs": "^0.4.1",
    "mocha": "^3.0.2",
    "source-map": "^0.5.6",
    "style-loader": "^0.14.0",
    "webpack": "^4.0.0 || ^4.0.0-beta.* || ^3.8.1 || ^3.0.0 || ^3.0.0-rc.0 || ^2.1.0 || ^1.13.1",
    "webpack-cli": "^1.5.3",
    "webpack-isomorphic-tools": "^3.0.0",
    "worker-loader": "^1.0.0"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "homepage": "https://github.com/mzgoddard/hard-source-webpack-plugin#readme",
  "keywords": [
    "webpack",
    "disk",
    "iterative",
    "build",
    "cache",
    "plugin"
  ],
  "license": "ISC",
  "main": "index.js",
  "name": "hard-source-webpack-plugin",
  "optionalDependencies": {},
  "peerDependencies": {
    "webpack": "*"
  },
  "readme": "# HardSourceWebpackPlugin\n\n[![Build Status](https://travis-ci.org/mzgoddard/hard-source-webpack-plugin.svg?branch=master)](https://travis-ci.org/mzgoddard/hard-source-webpack-plugin) [![Build status](https://ci.appveyor.com/api/projects/status/761saaelxem01xo5/branch/master?svg=true)](https://ci.appveyor.com/project/mzgoddard/hard-source-webpack-plugin/branch/master)\n\n`HardSourceWebpackPlugin` is a plugin for webpack to provide an intermediate caching step for modules. In order to see results, you'll need to run webpack twice with this plugin: the first build will take the normal amount of time. The second build will be signficantly faster.\n\nInstall with `npm install --save hard-source-webpack-plugin` or `yarn`. And include the plugin in your webpack's plugins configuration.\n\n```js\n// webpack.config.js\nvar HardSourceWebpackPlugin = require('hard-source-webpack-plugin');\n\nmodule.exports = {\n  context: // ...\n  entry: // ...\n  output: // ...\n  plugins: [\n    new HardSourceWebpackPlugin()\n  ]\n}\n```\n\nYou can optionally set where HardSource writes and reads its cache to and from, and the hash values that determine when it creates new caches.\n\n```js\nnew HardSourceWebpackPlugin({\n  // Either an absolute path or relative to webpack's options.context.\n  cacheDirectory: 'node_modules/.cache/hard-source/[confighash]',\n  // Either an absolute path or relative to webpack's options.context.\n  // Sets webpack's recordsPath if not already set.\n  recordsPath: 'node_modules/.cache/hard-source/[confighash]/records.json',\n  // Either a string of object hash function given a webpack config.\n  configHash: function(webpackConfig) {\n    // node-object-hash on npm can be used to build this.\n    return require('node-object-hash')({sort: false}).hash(webpackConfig);\n  },\n  // Either false, a string, an object, or a project hashing function.\n  environmentHash: {\n    root: process.cwd(),\n    directories: [],\n    files: ['package-lock.json', 'yarn.lock'],\n  },\n}),\n```\n\n## Options\n\n### `cacheDirectory`\n\nThe `cacheDirectory` is where the cache is written to. The default stores the cache in a directory under node_modules so if node_modules is cleared so is the cache.\n\nThe `cacheDirectory` has a field in it `[confighash]` that is replaced by the `configHash` option when webpack is started. The `[confighash]` field is here to help with changes to the configuration by the developer or by a script. For example if the same webpack configuration is used for the `webpack` cli tool and then the `webpack-dev-server` cli tool, they will generate different configuration hashes. `webpack-dev-server` adds plugins for its reloading features, and the default hash function produces a different value with those plugins added.\n\n### `recordsPath`\n\n`webpack` produces records for the ids it uses for its internal objects that `hard-source` writes to disk. The `recordsPath` option in `hard-source` is the same option for webpack. Use it to make use of the `[confighash]` value as it also appears in `cacheDirectory` so that the records are stored next to the rest of the cache.\n\n### `configHash`\n\n<a name=\"using-confighash-in-the-cachedirectory\"></a>\n<a name=\"why-hash-the-config\"></a>\n\n`configHash` turns a webpack configuration when a webpack instance is started and is used by `cacheDirectory` and `recordsPath` to build different caches for different webpack configurations.\n\nConfigurations may change how modules are rendered and so change how they appear in the disk cache `hard-source` writes. It is important to use a different cache per webpack configuration or webpack cli tool. `webpack` and `webpack-dev-server` for example needed separate caches, `configHash` and `[confighash]` in the `cacheDirectory` will create separate caches due to the plugins and configuration changes `webpack-dev-server` makes.\n\nThe default value for `configHash` is\n\n```js\nconfigHash: function(webpackConfig) {\n  return require('node-object-hash')({sort: false}).hash(webpackConfig);\n}\n```\n\nThis uses the npm `node-object-hash` module with sort set to false to hash the object. `node-object-hash` hashes as much as it can but may have issue with some plugins or plugins and loaders that load an additional configuration file like a babel rc file or postcss config. In those cases you can depend on `node-object-hash` and extend what it hashes to best cover those changes.\n\n`configHash` can also be set to a string or it can be a function that generates a value based on other parts of the environment.\n\n```js\nconfigHash: function() {\n  return process.env.NODE_ENV + '-' process.env.BABEL_ENV;\n}\n```\n\n### `environmentHash`\n\nWhen loaders, plugins, other build time scripts, or other dynamic dependencies change, `hard-source` needs to replace the cache to make sure the otuput is correct. The `environmentHash` is used to determine this. If the hash is different than a previous build, a fresh cache will be used.\n\nThe default object\n\n```js\nenvironmentHash: {\n  root: process.cwd(),\n  directories: [],\n  files: ['package-lock.json', 'yarn.lock']\n}\n```\n\nhashes the lock files for `npm` and `yarn`. They will both be used if they both exist, or just one if only one exists. If neither file is found, the default will hash `package.json` and the `package.json` under `node_modules`.\n\n<a name=\"environmenthash-as-a-function\"></a>\n<a name=\"environmenthash-as-an-object\"></a>\n\n<a name=\"environmenthash-disabled-with-false\"></a>\n\nYou can disable the environmentHash by setting it to `false`. By doing this you will manually need to delete the cache when there is any dependency environment change.\n\n## Troubleshooting\n\n### Configuration changes are not being detected\n\n`hard-source` needs a different cache for each different webpack configuration. The default `configHash` may not detect all of your options to plugins or other configuration files like `.babelrc` or `postcss.config.js`. In those cases a custom `configHash` is needed hashing the webpack config and those other values that it cannot normally reach.\n\n### Hot reloading is not working\n\n`webpack-dev-server` needs a different cache than `webpack` or other webpack cli tools. Make sure your `cacheDirectory` and `configHash` options are hashing the changes `webpack-dev-server` makes to your webpack config. The default `hard-source` values should do this.\n\n### Multiple webpack processes at the same time are getting bad results\n\nIf you are using multiple webpack instances in separate processes make sure each has its own cache by changing `cacheDirectory` or `configHash`.\n\n### Rebuilds are slower than the first build during dev-server\n\nThis is can be due to module context dependencies. `require.context` or loaders that watch folders use this webpack feature so webpack rebuilds when files or folders are added or removed from these watched directories. Be careful about using `require.context` or context aware loaders on folders that contain a lot of items. Both `require.context` and context loaders depend on those folders recursively. `hard-source` hashes every file under a `require.context` or context loader folder to detect when the context has changed and dependent modules are rebuilt.\n\n### `webpack-dev-server` build loops continuously\n\nMake sure you don't have a `require.context` or context loader on the root of your project. Such a context module means webpack is watching the hard source cache and when the cache is written after a build, webpack will start a new build for that module. This normally does not happen with `webpack-dev-server` because it writes the built files into memory instead of the disk. `hard-source` cannot do that since that would defeat its purpose as a disk caching plugin.\n\n## Please contribute!\n\nIf you encounter any issues or have an idea for hard-source-webpack-plugin could be better, please let us know.\n\n# [Change Log](CHANGELOG.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mzgoddard/hard-source-webpack-plugin.git"
  },
  "scripts": {
    "test": "mocha tests/*.js"
  },
  "version": "0.6.4"
}
